---

- name: List FPGA devices that can be accessed by FPGA user group
  command: find / -ignore_readdir_race -group fpgauser
  register: fpga_devices_list
  changed_when: false

- name: Add project Atomic repository
  apt_repository:
    repo: ppa:projectatomic/ppa
  retries: 10
  delay: 1
  when: (rootless | bool) and ansible_os_family == 'Debian'

- name: Ensure Podman is installed
  apt:
    name: podman
    state: present
    update_cache: true
    install_recommends: false
  retries: 10
  delay: 1
  when: (rootless | bool) and ansible_os_family == 'Debian'

- name: Ensure Podman is installed
  yum:
    name: podman
    state: present
    install_weak_deps: false
  retries: 10
  delay: 1
  when: (rootless | bool) and ansible_os_family == 'RedHat'

- name: Ensure Docker python package is installed [Ansible requirement]
  apt:
    name: python3-docker
    state: present
    install_recommends: false
  retries: 10
  delay: 1
  when: not (rootless | bool) and ansible_os_family == 'Debian'

- name: Ensure Docker python package is installed [Ansible requirement]
  yum:
    name: python-docker
    state: present
    install_weak_deps: false
  retries: 10
  delay: 1
  when: not (rootless | bool) and ansible_os_family == 'RedHat'

- name: Pull application container image using Docker
  docker_image:
    name: "{{ app_packages[0].name }}"
    tag: "{{ app_packages[0].version | default('latest') }}"
    state: present
    source: pull
  register: docker_image_info
  retries: 10
  delay: 1
  when: not rootless|bool

- name: Pull application container image using Podman
  podman_image:
    name: "{{ app_packages[0].repository | default('docker.io') }}/
           {{ app_packages[0].name }}"
    tag: "{{ app_packages[0].version | default('latest') }}"
    state: present
  register: podman_image_info
  become_user: appuser
  become: true
  retries: 10
  delay: 1
  when: rootless|bool

- name: Configure Accelize container service
  template:
    src: accelize_container.service.j2
    dest: /etc/systemd/system/accelize_container.service

- name: Ensure Accelize container service is started and enabled at boot
  systemd:
    name: accelize_container
    state: started
    enabled: true

- name: Forward required ports < 1024 to user bindable ports
  iptables:
    table: nat
    chain: PREROUTING
    jump: REDIRECT
    protocol: "{{ item['protocol'] }}"
    destination_port: "{{ item['port'] }}"
    to_ports: "{{ item['redirect'] }}"
  with_items: "{{ firewall_rules | rules_ports(only_restricted=True,
               redirect=True) }}"
  register: port_forward
  when: rootless|bool
  notify: Save iptables
