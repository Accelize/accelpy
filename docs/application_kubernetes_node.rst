Kubernetes Node
===============

This application provides a Kubernetes node that can be integrated into any
Kubernetes architecture to run FPGA powered pods.

This also allow provision the application as a single Kubernetes master/node
to easily test the application on a standalone disposable Kubernetes
infrastructure, and then to build a node image that can be used to deploy the
FPGA application on any existing Kubernetes infrastructure.

Prerequisites
-------------

To use this application a minimum Kubernetes knowledge is required to create
YAML files (pods, deployments services,...) that are required to deploy the
application. See `Kubernetes documentation <https://kubernetes.io/docs/home/>`_
for more information.

Application definition
----------------------

This application type support the following package types:

* `kubernetes_yaml`: A Kubernetes pod or deployment.
* `vm_image`: An image of an already provisioned virtual machine.

It is possible to provides as many `kubernetes_yaml` as needed, by example to
create a *deployment* and then the *service* that will expose it.
`kubernetes_yaml` are applied in provided order.

Example snippet of application definition file:

.. code-block:: yaml

   application:
     name: my_application
     version: 1.0.2
     type: kubernetes_node

   package:
     - name: url_to_my_deployment_yaml
       type: kubernetes_yaml
     - name: url_to_my_service_yaml
       type: kubernetes_yaml

Variables
~~~~~~~~~

This application support following variables:

* `master_node`: If set to `true`, install the application as a
  single master/node. If set to `false`, install the application as a node that
  must be integrated with an existing Kubernetes infrastructure. Default to
  `true` with `accelpy apply` and false with `accelpy build`.
* `kubernetes_join_command`: Only if `master_node` is `false`. A command
  to run on the node to joint the Kubernetes master. This command may be
  generated by running `kubeadm token create --print-join-command` on the
  master.

Container configuration
-----------------------

See :doc:`application_container_image` for common container requirements.

Device plugin and pod/deployment configuration
----------------------------------------------

Kubernetes use
`devices plugins <https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/device-plugins/>`_
to manage FPGA resources.

Pods and deployment requires to specify resource limits to allow the use of
FPGA devices. Here is a basic examples of pods that require a FPGA device
for its container:

.. code-block:: yaml

    apiVersion: v1
    kind: Pod
    metadata:
      name: my_application_pod
    spec:
      containers:
        - name: my_container
          image: my_docker_account/my_image
          resources:
            limits:
              my_fpga_board_type: 1

Each device plugin may require the add of extra options to work.
The FPGA board type value also depend on the device plugin.
See relevant device plugins documentation for more information:

* `Intel boards <https://github.com/intel/intel-device-plugins-for-kubernetes/tree/master/cmd/fpga_plugin>`_
* `Xilinx boards <https://github.com/Xilinx/FPGA_as_a_Service/tree/master/k8s-fpga-device-plugin/trunk>`_
* `AWS F1 instances <https://github.com/Xilinx/FPGA_as_a_Service/tree/master/k8s-fpga-device-plugin/trunk/aws>`_

Security notice
~~~~~~~~~~~~~~~

Depending on the device plugin requirements, the container may run
in `privileged` mode to have FPGA access. This means that the container run as
`root` on your host.

It is not recommanded to use privileged containers in production.

Node mode
---------

In the master/node mode, the provided Kubernetes YAML configuration are applied
and the application should be ready to use.

In the node mode, the node is provisioned with FPGA and Kubernetes node
requirements but nothing is applied. You needs to join your node to your
infrastructure  and apply your configuration on your master on the node.

The node mode is mainly intended to be used with `accelpy build` to create
a virtual machine image that can be used as base to create FPGA nodes in an
existing Kubernetes infrastructure.

To work properly, the relevant device plugin (See bellow) must be applied on
the master of your infrastructure.

Here is a basic example showing how to deploy a device plugin and your
application on the Kubernetes master (This assume you are connected on the
master using SSH and `kubectl` is installed):

.. code-block:: bash

    # Apply the device plugin
    # Notes:
    #   - The URL can be found on the relevant device plugin web page
    #   - More instructions may be required depending on the device plugin, read
    #     the documentation first.
    kubectl apply -f url/to/fpga-device-plugin.yml

    # Apply your deployments/pods/services (Repeat for each required YAML file)
    kubectl apply -f my-deployment.yml

Examples
--------

Here are some examples of deployment using this application type:

* :doc:`example_kubeless_function`


Known issues
------------

In the single master/node mode, virtual machines image generated from
`accelpy build` will not work properly once deployed due to the change of the
IP address. For this reason, `master_node` is forced to `false` with
`accelpy build`.
